{"ast":null,"code":"var _jsxFileName = \"/srv/Projects/socket-io/frontend-chat-app/src/components/ChatApp.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport socket from '../utils/socket';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, ConversationHeader, Avatar, MessageList, Message, MessageInput } from '@chatscope/chat-ui-kit-react';\nimport { conversations } from '../mockData';\nimport Sidebar from './Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const messageInputRef = useRef(null);\n  useEffect(() => {\n    socket.connect();\n    socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n    socket.on('_chat_message', data => {\n      setMessages(prevMessages => [...prevMessages, {\n        text: data.message,\n        type: 'received'\n      }]);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('_chat_message');\n      socket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    if (selectedConversation && messageInputRef.current) {\n      messageInputRef.current.focus();\n    }\n  }, [selectedConversation]);\n  const sendMessage = () => {\n    if (messageInput.trim()) {\n      socket.emit('send_message', {\n        message: messageInput\n      });\n      setMessages(prevMessages => [...prevMessages, {\n        text: messageInput,\n        type: 'sent'\n      }]);\n      setMessageInput('');\n    }\n  };\n  const handleUserClick = plate => {\n    const conversation = conversations.find(conv => conv.plate === plate);\n    setSelectedConversation(conversation);\n    setMessages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      handleUserClick: handleUserClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), selectedConversation && /*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ConversationHeader, {\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          src: selectedConversation.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ConversationHeader.Content, {\n          userName: selectedConversation.plate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n          model: {\n            message: message.text,\n            direction: message.type === 'sent' ? 'outgoing' : 'incoming'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        placeholder: \"Digite aqui\",\n        value: messageInput,\n        onChange: val => setMessageInput(val),\n        onSend: sendMessage,\n        attachButton: false,\n        ref: messageInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatApp, \"HHNMCmGNR2IxYK/ocYX7qKIgP00=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useEffect","useState","useRef","socket","MainContainer","ChatContainer","ConversationHeader","Avatar","MessageList","Message","MessageInput","conversations","Sidebar","jsxDEV","_jsxDEV","ChatApp","_s","messages","setMessages","messageInput","setMessageInput","selectedConversation","setSelectedConversation","messageInputRef","connect","on","console","log","data","prevMessages","text","message","type","off","disconnect","current","focus","sendMessage","trim","emit","handleUserClick","plate","conversation","find","conv","children","fileName","_jsxFileName","lineNumber","columnNumber","src","avatar","Content","userName","map","index","model","direction","placeholder","value","onChange","val","onSend","attachButton","ref","_c","$RefreshReg$"],"sources":["/srv/Projects/socket-io/frontend-chat-app/src/components/ChatApp.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport socket from '../utils/socket';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport {\n    MainContainer,\n    ChatContainer,\n    ConversationHeader,\n    Avatar,\n    MessageList,\n    Message,\n    MessageInput\n} from '@chatscope/chat-ui-kit-react';\nimport { conversations } from '../mockData';\nimport Sidebar from './Sidebar';\n\nconst ChatApp = () => {\n    const [messages, setMessages] = useState([]);\n    const [messageInput, setMessageInput] = useState('');\n    const [selectedConversation, setSelectedConversation] = useState(null);\n    const messageInputRef = useRef(null);\n\n    useEffect(() => {\n        socket.connect();\n\n        socket.on('connect', () => {\n            console.log('Connected to server');\n        });\n\n        socket.on('_chat_message', (data) => {\n            setMessages((prevMessages) => [...prevMessages, { text: data.message, type: 'received' }]);\n        });\n\n        return () => {\n            socket.off('connect');\n            socket.off('_chat_message');\n            socket.disconnect();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (selectedConversation && messageInputRef.current) {\n            messageInputRef.current.focus();\n        }\n    }, [selectedConversation]);\n\n    const sendMessage = () => {\n        if (messageInput.trim()) {\n            socket.emit('send_message', { message: messageInput });\n            setMessages((prevMessages) => [...prevMessages, { text: messageInput, type: 'sent' }]);\n            setMessageInput('');\n        }\n    };\n\n    const handleUserClick = (plate) => {\n        const conversation = conversations.find(conv => conv.plate === plate);\n        setSelectedConversation(conversation);\n        setMessages([]);\n    };\n\n    return (\n        <MainContainer>\n            <Sidebar handleUserClick={handleUserClick} />\n            {selectedConversation && (\n                <ChatContainer>\n                    <ConversationHeader>\n                        <Avatar src={selectedConversation.avatar} />\n                        <ConversationHeader.Content userName={selectedConversation.plate} />\n                    </ConversationHeader>\n                    <MessageList>\n                        {messages.map((message, index) => (\n                            <Message\n                                key={index}\n                                model={{\n                                    message: message.text,\n                                    direction: message.type === 'sent' ? 'outgoing' : 'incoming',\n                                }}\n                            />\n                        ))}\n                    </MessageList>\n                    <MessageInput\n                        placeholder=\"Digite aqui\"\n                        value={messageInput}\n                        onChange={(val) => setMessageInput(val)}\n                        onSend={sendMessage}\n                        attachButton={false}\n                        ref={messageInputRef}\n                    />\n                </ChatContainer>\n            )}\n        </MainContainer>\n    );\n};\n\nexport default ChatApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}